// schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Coordenador {
  id                  String             @id @default(uuid())
  nome                String
  telefone            String
  grupoId             String?
  grupo               Grupo?             @relation(fields: [grupoId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  MovimentoPastoral   MovimentoPastoral? @relation(fields: [movimentoPastoralId], references: [id])
  movimentoPastoralId String?

  @@index([grupoId])
  @@index([movimentoPastoralId])
}

model RedeSocial {
  id                  String             @id @default(uuid())
  rede                String
  nomeUsuario         String
  grupoId             String?
  grupo               Grupo?             @relation(fields: [grupoId], references: [id])
  MovimentoPastoral   MovimentoPastoral? @relation(fields: [movimentoPastoralId], references: [id])
  movimentoPastoralId String?

  @@index([grupoId])
  @@index([movimentoPastoralId])
}

model Ata {
  id                  String             @id @default(uuid())
  data                DateTime
  descricao           String
  grupoId             String?
  grupo               Grupo?             @relation(fields: [grupoId], references: [id])
  MovimentoPastoral   MovimentoPastoral? @relation(fields: [movimentoPastoralId], references: [id])
  movimentoPastoralId String?

  @@index([grupoId])
  @@index([movimentoPastoralId])
}

model Grupo {
  id            String        @id @default(uuid())
  nome          String
  setor         String
  paroquia      String
  comunidade    String
  anoFundacao   String?
  biografia     String?
  coordenadores Coordenador[]
  redesSociais  RedeSocial[]
  atas          Ata[]
  jovensAtivos  String
  reunioes      String?
  observacoes   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model MovimentoPastoral {
  id            String        @id @default(uuid())
  nome          String
  localAtuacao  String
  tipo          String
  anoFundacao   String?
  carisma       String?
  biografia     String?
  coordenadores Coordenador[]
  redesSociais  RedeSocial[]
  atas          Ata[]
  jovensAtivos  String
  atividades    String?
  observacoes   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CoordenadorDiocesano {
  id            String   @id @default(uuid())
  nome          String
  telefone      String
  paroquia      String
  representacao String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Evento {
  id          String   @id @default(uuid())
  titulo      String
  local       String
  publicoAlvo String
  organizador String
  dataInicio  DateTime
  dataFim     DateTime
  descricao   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
